#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

// TODO: Add bindings to:
// 1. Store the input blades    
// 2. Write out the culled blades
// 3. Write the total number of blades remaining

// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like
//
// layout(set = ???, binding = ???) buffer NumBlades {
// 	  uint vertexCount;   // Write the number of blades remaining here
// 	  uint instanceCount; // = 1
// 	  uint firstVertex;   // = 0
// 	  uint firstInstance; // = 0
// } numBlades;

layout(set = 2, binding = 0) buffer BladeBuffer {
    Blade blades[];
} bladeBuffer;

layout(set = 2, binding = 1) buffer CulledBladeBuffer {
    Blade blades[];
} culledBladeBuffer;

layout(set = 2, binding = 2) buffer NumBladesBuffer {
    uint vertexCount;
    uint instanceCount;
    uint firstVertex;   // = 0
    uint firstInstance; // = 0
} numBlades;

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

bool isInFrustum(vec4 pos) {
    vec4 clipSpace = camera.proj * camera.view * vec4(pos.xyz, 1.0);
    return inBounds(clipSpace.x, clipSpace.w) &&
           inBounds(clipSpace.y, clipSpace.w) &&
           inBounds(clipSpace.z, clipSpace.w);
}

float getRandom(vec3 v0) {
    return fract(sin(dot(v0.xyz, vec3(12.9898, 78.233, 151.7182))) * 43758.5453);
}

vec3 random3(vec3 p) {
  return fract(sin(vec3(dot(p, vec3(127.1, 311.7, 513.76)),
                        dot(p, vec3(269.5, 183.3, 389.22)),
                        dot(p, vec3(378.1, 210.4, 193.9)))) *
               43758.5453);
}

void main() {
	// Reset the number of blades to 0
	if (gl_GlobalInvocationID.x == 0) {
		numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

    // TODO: Apply forces on every blade and update the vertices in the buffer
    Blade blade = bladeBuffer.blades[gl_GlobalInvocationID.x];
    vec3 v0 = blade.v0.xyz;
    vec3 v1 = blade.v1.xyz;
    vec3 v2 = blade.v2.xyz;
    vec3 up = blade.up.xyz;
    float orientation = blade.v0.w;
    float height = blade.v1.w;
    float width = blade.v2.w;
    vec3 tangent = vec3(cos(orientation), 0.0, sin(orientation));
    vec3 f = cross(tangent, up);
    float stiffness = blade.up.w;

    // FORCE 1 : GRAVITY
    vec4 D = vec4(0.0, -1.0, 0.0, 9.81); // D.xyz is the gravity direction, and D.w is the magnitude of acceleration
    vec3 gE = vec3(0.0, -9.81, 0.0);
    vec3 gF = 0.25 * length(gE) * f;
    vec3 g = gE + gF;

    // FORCE 2 : RECOVERY
    vec3 iv2 = v0 + up * height; // position before simulation
    vec3 r = (iv2 - v2) * stiffness;

    // FORCE 3: WIND
    vec3 windDir = random3(v0) * sin(totalTime) * 3.0;
    float dirAligment = 1 - abs(dot(normalize(windDir), normalize(v2 - v0)));
    float heightRatio = dot((v2 - v0), up) / height;
    float aligment = dirAligment * heightRatio;
    vec3 windForce = windDir * aligment;

    // Update blade position
    vec3 tv2 = (g + r + windForce) * deltaTime;
    v2 += tv2;

    // Position Validation
    // 1. v2 above ground
    v2 = v2 - up * min(dot(up, v2 - v0), 0.0);

    // 2. v1 above v0
    float vl_proj = length(v2 - v0 - up * dot(v2 - v0, up));
    v1 = v0 + height * up * max(1 - vl_proj / height, 0.05 * max(vl_proj / height, 1.0));

    // 3. length of curve no longer than height
    float n = 2.0;
    float L0 = length(v2 - v0);
    float L1 = length(v2 - v1)+ length(v1 - v0); 
    float L = (2.0 * L0 + (n - 1) * L1) / (n + 1);

    float ratio = height / L;
    vec3 v1_corr = v0 + ratio * (v1 - v0);
    vec3 v2_corr = v1_corr + ratio * (v2 - v1);
    v1 = v1_corr;
    v2 = v2_corr;


    // update blade info
    blade.v1.xyz = v1;
    blade.v2.xyz = v2;
    bladeBuffer.blades[gl_GlobalInvocationID.x] = blade;


	// TODO: Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer
	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads
    bool oriCullFlag = false;
    bool viewCullFlag = false;
    bool distanceCullFlag = false;

    // Orientation Culling
    vec3 viewDir = normalize(vec3(inverse(camera.view) * vec4(0.0, 0.0, 0.0, 1.0)));
    if(dot(viewDir, tangent) < 0.9) {
        oriCullFlag = true;
    }

    // View Frustum Culling
    vec4 m = (1.0/4.0) * blade.v0 * (1.0/2.0) * blade.v1 * (1.0/4.0) * blade.v2;
    if(isInFrustum(blade.v0) && isInFrustum(blade.v1) && isInFrustum(m)) {
        viewCullFlag = true;
    }

    // Distance Culling
    float culledDistance = 20.0;
    int levelMax = 20;
    vec3 cameraPos = vec3(inverse(camera.view) * vec4(0.0, 0.0, 0.0, 1.0));
    float projDistance = length(v0 - cameraPos - up * dot(up , (v0 - cameraPos)));
    if((gl_GlobalInvocationID.x % levelMax) <= floor(levelMax * (1 - projDistance / culledDistance))) {
        distanceCullFlag = true;
    }


    if(oriCullFlag && viewCullFlag && distanceCullFlag) {
        uint index = atomicAdd(numBlades.vertexCount, 1);
        culledBladeBuffer.blades[index] = blade;
    }

    //culledBladeBuffer.blades[atomicAdd(numBlades.vertexCount, 1)] = blade;

}
